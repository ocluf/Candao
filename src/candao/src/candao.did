type Member = record {
    principal_id: principal;
    name: text;
    description: text;
};

type Canister = record {
    canister_id: principal;
};

type ProposalType = variant {
    AddMember: Member;
    RemoveMember: principal;
    CreateCanister;
    LinkCanister: record {
        canister_id: principal;
    };
    InstallCanister: record {
        canister_id: principal;
        mode: variant {
            install; reinstall; upgrade;
        };
        wasm: blob;
    };
    DeleteCanister;
    StartCanister;
    StopCanister;
    UpdateCanisterSettings;
};


type ProposalStatus = variant {
    InProgress;
    Executed;
    Rejected;
    Failed;
};

type Vote = variant {
    Yes;
    No;
};

type Proposal = record {
    proposal_id: nat64;
    proposer: principal;
    proposal_date: nat64;
    proposal_type: ProposalType;
    proposal_status: ProposalStatus;
    yes_votes: vec principal;
    no_votes: vec principal;
};

type DaoInfo = record {
    title: text;
    description: text;
};

type TakeControlResponse = variant {
    Success;
    NoAnonymous;
    AlreadyTaken;
};

type CreateProposalResponse = variant {
    Success;
    NoPermission;
    CanisterAlreadyAdded;
};

type UpdateResponse = variant {
    Success;
    NoPermission;
};

type VoteResponse = variant {
    VoteCast;
    NoPermission;
    AlreadyVoted;
    InvalidProposalId;
    AlreadyDecided;
}

service : {
    "take_control": () -> (TakeControlResponse); 
    "create_proposal": (ProposalType) -> (CreateProposalResponse);
    "update_member_info": (text, text) -> (UpdateResponse);
    "update_dao_info": (DaoInfo) -> (UpdateResponse);
    "vote": (nat64, Vote) -> (VoteResponse);
    "get_members": () -> (vec Member) query;
    "get_canisters": () -> (vec Canister) query;
    "get_proposals": () -> (vec Proposal) query;
    "get_dao_info": () -> (DaoInfo) query;
}